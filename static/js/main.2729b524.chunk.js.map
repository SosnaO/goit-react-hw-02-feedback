{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notitfication/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","counter","label","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","button","all_button","type","onClick","Section","children","title","Notification","message","show","Feedback","state","isShowing","event","value","target","textContent","toLowerCase","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","positiveFeedback","feedback","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2729b524.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"Feedback_feedback__1gP6e\",\"heading\":\"Feedback_heading__1S3zF\",\"counter\":\"Feedback_counter__s1Xo8\",\"label\":\"Feedback_label__1M5n_\",\"all_button\":\"Feedback_all_button__Gy0Vb\",\"button\":\"Feedback_button__1weJA\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../Feedback/Feedback.module.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage}) => {\r\n    return(\r\n        <>\r\n        <div className={styles.counter}>\r\n        <span className={styles.label}>Good: {good} </span>\r\n        <span className={styles.label}>Neutral: {neutral} </span>\r\n        <span className={styles.label}>Bad: {bad} </span>\r\n        <span className={styles.label}>Total: {total} </span>\r\n        <span className={styles.label}>Positive feedback: {positivePercentage} %</span>\r\n  \r\n        </div>\r\n        </>\r\n);\r\n};\r\nStatistics.defaultProps = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positivePercentage: 0,\r\n  };\r\nStatistics.propTypes={\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n }\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../Feedback/Feedback.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback})=>{\r\n    return(\r\n        <>\r\n            {options.map(button =>{\r\n        return (\r\n            <div className={styles.all_button} key={button}>\r\n                  <button className={styles.button} type=\"button\" onClick={onLeaveFeedback}>{button}</button>\r\n            </div>          \r\n        )\r\n        }\r\n    )\r\n}\r\n        </>\r\n);\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  };\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n    return (\r\n      <>\r\n        <h1>{title}</h1>\r\n        {children}\r\n      </>\r\n    );\r\n  };\r\n    \r\n  Section.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n  }\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ children, message, show }) => {\r\n    return <>{show ? <div>{children}</div> : <p>{message}</p>}</>;\r\n  };\r\n  \r\n    Notification.propTypes = {\r\n    message: PropTypes.string,  \r\n  };\r\n\r\n\r\n export default Notification;","import React, { Component } from 'react';\r\nimport styles from './Feedback.module.css';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Section from '../Section/Section';\r\nimport Notification from '../Notitfication/Notification'\r\nclass Feedback extends Component {\r\n    state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n    \r\n  show = isShowing => {\r\n    return isShowing;\r\n  };\r\n\r\n    onLeaveFeedback = event => {\r\n    const value = event.target.textContent.toLowerCase();\r\n    this.setState(prevState => {\r\n        if (value === 'good') return { good: prevState[value] + 1 };\r\n        if (value === 'neutral') return { neutral: prevState[value] + 1 };\r\n        if (value === 'bad') return { bad: prevState[value] + 1 };\r\n      });\r\n    };\r\n    \r\n    countTotalFeedback = () => {\r\n        return Object.values(this.state).reduce((acc, value) => acc + value);\r\n    };\r\n    \r\n   countPositiveFeedbackPercentage=(total)=>{\r\n        return Math.round((this.state.good/total)*100);\r\n    };\r\n\r\n    render(){\r\n    const total = this.countTotalFeedback();\r\n    const positiveFeedback=this.countPositiveFeedbackPercentage(total);\r\n    const show = this.show(total);\r\n        return(\r\n        <div className={styles.feedback}>\r\n\r\n    <Section title={'Plese leave feedback'}>\r\n        <FeedbackOptions \r\n            options={['Good', 'Neutral', 'Bad']}\r\n            onLeaveFeedback={this.onLeaveFeedback} />\r\n    </Section>\r\n\r\n    <Section title={'Statistics'}>\r\n        <Notification message=\"No feedback given\" show={show}>\r\n            <Statistics\r\n             good={this.state.good} \r\n             neutral={this.state.neutral}\r\n             bad={this.state.bad} \r\n             total={total} \r\n             positivePercentage={positiveFeedback}/>\r\n         </Notification>\r\n    </Section>\r\n</div>\r\n)\r\n}\r\n}\r\n\r\nexport default Feedback;","\nimport './App.css';\nimport Feedback from './components/Feedback/Feedback'\nfunction App() {\n  return (\n    <Feedback />\n      )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}